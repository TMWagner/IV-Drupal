<?php
 
/*
 * @file
 * General module file for IDMOD
 */

 
/**
 * TODO:
 * 8/3/2014: We should load the js on some pages individually.
 *    See: http://www.benmarshall.me/load-js-css-specific-page-drupal-7/
 */
 
 

/**
 * Implementation of hook_field_display_alter
 * Convert the reference to profile entity "Main profile" to actual name. 
 */
function idmod_field_display_node_alter(&$display, $context) {
  
  switch ($context['entity']->type) {
    case 'publications':
      if (isset($context['entity']->field_publications_author['und'][0]['entity']->label)) {
        // Loop through the author array
        // TODO: Each label is process at least three times... could set a flag and stop that BS
        foreach ($context['entity']->field_publications_author['und'] as $key => $item) {
          $label = $item['entity']->field_profile_first_name['und'][0]['value'];
          $label .= ' ';
          $label .= $item['entity']->field_profile_last_name['und'][0]['value'];
          $context['entity']->field_publications_author['und'][$key]['entity']->label =  $label;
        }
      }
      break;
      
    case 'polio_reports':
      if (isset($context['entity']->field_polo_report_author['und'][0]['entity']->label)) {
        foreach ($context['entity']->field_polo_report_author['und'] as $key => $item) {
          $label = $item['entity']->field_profile_first_name['und'][0]['value'];
          $label .= ' ';
          $label .= $item['entity']->field_profile_last_name['und'][0]['value'];
          $context['entity']->field_polo_report_author['und'][$key]['entity']->label =  $label;
        }        
      }
      
      break; 
  }

}


/**
 * Implements hook_context_load_alter().
 * http://drupalcontrib.org/api/drupal/contributions%21context%21context.api.php/function/hook_context_load_alter/7
 */
function idmod_context_load_alter(&$context) {
  // We need to make sure that the context menu blocks are ordered correctly via context.
  // Start with the search form and make it the "lightest". 
  
  if ($context->name == 'all_pages') {
    $context->reactions['block']['blocks']['search-form']['weight'] = -20;
  }
  if ($context->name == 'publications_page') {
    $context->reactions['block']['blocks']['block-5']['weight'] = -10;
  }
}



///**
// * Implementation of hook_form_alter
// */
//function idmod_form_alter(&$form, &$form_state, $form_id) {
//  $debug_form = $form;
//  if ($form_id == 'publications_node_form') {
//    // process
//    
//    $debug_form = $form;
//
//    // Problem when following code... If one author is set, there are actually two array entries... we
//    // can't get the property of af non-existant object. 
//    
//    //$key = 0;
//    //  while (isset($form['field_publications_author']['und'][$key])) {
//    //    // If there is more then one name, we add a comma to present item.
//    //    //if(isset($build['field_publications_author'][$key+1])) {
//    //    //  $build['field_publications_author'][$key]['#markup'] .= ',';       
//    //    //}
//    //    // Check to make sure there is a profile... 
//    //    $target_id = $form['field_publications_author']['und'][$key]['target_id']['#entity']->field_publications_author['und'][$key]['target_id'];
//    //    $profile = profile2_load($target_id);
//    //    
//    //    $default_name = $profile->field_profile_first_name['und'][0]['value'] .
//    //      ' ' . $profile->field_profile_last_name['und'][0]['value'];
//    //    
//    //    
//    //    $debug_target = $form['field_publications_author']['und'][$key]['target_id']['#default_value'];
//    //    
//    //    ++$key;
//    //  }    
//    //
//
//  }
//  
//}





/**
 * Implementation of hook_entity_info_alter(&$entity_info).
 * Modify URL of taxonomy terms
 * Ref: http://drupal.stackexchange.com/questions/18784/how-to-modify-taxonomy-term-path-in-the-page-render-array
 * Ref: http://www.erikwebb.net/blog/changing-url-all-taxonomy-terms/
 
 * TODO:  9/13/2014- Why are we doing this? Prior to using DS?
 */
function idmod_entity_info_alter(&$entity_info) {

  $entity_info['taxonomy_term']['uri callback'] = 'idmod_taxonomy_term_uri';
  
  $entity_info['node']['view modes']['full_node'] = array(
    'label' => t('Full Node display'),
    'custom settings' => TRUE,
  );

}


function idmod_taxonomy_term_uri($term) {
  $new_url = NULL;
  
  switch ($term->name) {
      case "Numerical Methods":
          $new_url = 'research/numerical';
          break;
      case "Tuberculosis":
          $new_url = 'research/tuberculosis';
          break;
      case "HIV":
          $new_url = 'research/hiv';
          break;        
      case "Malaria":
        $new_url = 'research/malaria';
        break;
      case "Polio":
        $new_url = 'research/polio';
        break;
  }  
  //return array('path' => 'research/numerical' . $term->tid);
  return array('path' => $new_url);
}

/**
 * Implementation of hook_entity_view_alter
 * We will modify the incoming data from the view handler before rendering.
 *
 * TODO: 2014-09-17: Check for foriegn author
 */

/* We can stick this into DS... or better yet, use DS API...
 */
function idmod_entity_view_alter(&$build, $type) {
  
  if($build['#bundle'] == 'publications') {
    $key = 0;
    // Set flag for foreign author
    $foreign_authors = $build['#node']->field_publication_foreign_author['und'][0]['value'];
    $foreign_authors_string = ($foreign_authors) ? t('IDM researchers included among the authors: ') : NULL;

      // Loop through authors listed
      while (isset($build['field_publications_author'][$key])) {
        // If there is more then one name, we add a comma to present item.
        if(isset($build['field_publications_author'][$key+1])) {
          // Now check to to see if role = Inactive. If so, we will take away link info...
          $author_uid = $build['field_publications_author']['#items'][$key]['entity']->uid;
          $author = user_load($author_uid);
          if (in_array ( 'Inactive', $author->roles )) {
            // This author is "inactive"
            $author_name_plain = $build['field_publications_author']['#object']->field_publications_author['und'][$key]['entity']->label;
            $build['field_publications_author'][$key]['#markup'] = $author_name_plain;
          }
           //If we have foreign authors, prepend "FA" notification to the first IDM author.
          if (($key == 0) && $foreign_authors) {
            $build['field_publications_author'][$key]['#markup'] = $foreign_authors_string . $build['field_publications_author'][$key]['#markup'];
          }   
          $build['field_publications_author'][$key]['#markup'] .= ',';

        }
        ++$key;
      }    
  }
}


/**
 * Implementation of hook_url_outbound_alter
 */
function idmod_url_outbound_alter(&$path, &$options, $original_path) {
  // We have altered the display of the user profile to our own internal view. 
  if (isset($options['entity_type'])) {
    if($options['entity_type'] == "profile2") {
      //intercept and modify the link
      $path = 'team/bio/' . $options['entity']->uid;
      $options['fragment'] = null;
    }
  }
  
}


/**
 * hook_entity_view($entity
 * Act on entities being assembled before rendering
 */
function idmod_entity_view($entity, $type, $view_mode, $langcode) {
  // CHeck "foreign author" field. If checked... don't display any author
  $debug = 1;
  
  if (isset( $entity->field_publication_foreign_author['und'][0]['value'])) {
    if ($entity->field_publication_foreign_author['und'][0]['value']) {
      // Remove all authors
      //unset ($entity->content['field_publications_author']);
    }
  } 
}




