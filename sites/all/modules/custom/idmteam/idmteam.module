<?php
/**
 * @file
 * Module file for defining custom Blocks
 */

/**
 * @defgroup block_example Example: Block
 * @ingroup examples
 * @{
 * Demonstrates code creation of blocks.
 *

 */


/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function idmteam_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.
  //
  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.
  //
  // Many options are defined in hook_block_info():
  $blocks['idmteam_author'] = array(
    // info: The name of the block.
    'info' => t('IDM Team Authors'),
    // Block caching options (per role, per user, etc.)
    // DRUPAL_CACHE_PER_ROLE is the default.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  
  $blocks['related_subteam'] = array(
    // info: The name of the block.
    'info' => t('Related Subteam members'),
    // Block caching options (per role, per user, etc.)
    // DRUPAL_CACHE_PER_ROLE is the default.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );  

  $blocks['team_contact'] = array(
    // info: The name of the block.
    'info' => t('Display team lead'),
    // Block caching options (per role, per user, etc.)
    // DRUPAL_CACHE_PER_ROLE is the default.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  
  $blocks['team_mem_related'] = array(
    // info: The name of the block.
    'info' => t('Team member info related by tag: Display group info.'),
    // Block caching options (per role, per user, etc.)
    // DRUPAL_CACHE_PER_ROLE is the default.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );   


  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function idmteam_block_configure($delta = '') {
  $form = array();
  // The $delta parameter tells us which block is being configured.
  // In this example, we'll allow the administrator to customize
  // the text of the 'configurable text string' block defined in this module.
  
  switch ($delta) {
    case 'idmteam_author':
      $form['idmteam_author_block'] = array(
        '#type' => 'textfield',
        '#title' => t('Block contents'),
        '#size' => 60,
        '#description' => t('This text will appear in the example block.'),
        '#default_value' => variable_get('idmteam_author_block', t('Some example content.')),
      ); 
      break;
    
    case 'related_subteam':
      $form['related_subteam_block'] = array(
        '#type' => 'textfield',
        '#title' => t('Block contents'),
        '#size' => 60,
        '#description' => t('Related Subteam members.'),
        '#default_value' => variable_get('related_subteam_block', t('Related Subteam members.')),
      ); 
      break;
    
    case 'team_contact':
      $form['team_lead_block'] = array(
        '#type' => 'textfield',
        '#title' => t('Block contents'),
        '#size' => 60,
        '#description' => t('Display team contact.'),
        '#default_value' => variable_get('team_lead_block', t('Related Subteam members.')),
      ); 
      break;
    
    case 'team_mem_related':
      $form['team_lead_block'] = array(
        '#type' => 'textfield',
        '#title' => t('Block contents'),
        '#size' => 60,
        '#description' => t('Display group info related by tag.'),
        '#default_value' => variable_get('team_mem_related_block', t('Team Member related hightlights.')),
      ); 
      break;      
    
    default:
      break;   
  }
  

  
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function idmteam_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.
  if ($delta == 'idmteam_author') {
    // Have Drupal save the string to the database.
    variable_set('idmteam_author_block', $edit['idmteam_author_block']);
  }
  
  if ($delta == 'related_subteam') {
    // Have Drupal save the string to the database.
    variable_set('related_subteam_block', $edit['related_subteam_block']);
  }
  
  if ($delta == 'team_contact') {
    // Have Drupal save the string to the database.
    variable_set('team_lead_block', $edit['team_lead_block']);
  }
  
  if ($delta == 'team_mem_related') {
    // Have Drupal save the string to the database.
    variable_set('team_mem_related_block', $edit['team_mem_related_block']);
  }    
  
  
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function idmteam_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'idmteam_author':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = NULL;
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = idmteam_contents($delta);
      break;
    
    case 'related_subteam':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = NULL;
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = idmteam_related_subteams($delta);
      break;
    
    case 'team_contact':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $block['subject'] = NULL;
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = idmteam_team_contact($delta);
      break;
    
    case 'team_mem_related':
      // The subject is displayed at the top of the block. 
      $block['subject'] = NULL;
      // Call the function that will generate the content of this block
      $block['content'] = idmteam_team_mem_related($delta);
      break;      

    default:
      $block = NULL;
      
  }
  
  
  return $block;
}

/**
 * A module-defined block content function.
 */

// TODO: Cleanup up the unneeded crap in here.
// Ref: https://api.drupal.org/api/views/views.module/function/views_embed_view/7
function idmteam_contents($which_block) {

  switch ($which_block) {
    case 'idmteam_author':
      // Load currant node object
      $node = menu_get_object();
  
      // Determine if we have one author or multiple.
      $number_author = count($node->field_publications_author['und']);
      if ($number_author > 1) {
        $views_embed = views_embed_view('idm_author', $display_id = 'multiple_authors', $node->nid);
      }
      else {
        $views_embed = views_embed_view('idm_author', $display_id = 'single_author', $node->nid);
      }
      
      //  We may not have an "Active" author...
      //  Need to loop through to find the first user not flagged as nonactive....
      
      $author_uid = $node->field_publications_author['und'][0]['entity']->uid;
      $author = user_load($author_uid);
      
      if (in_array ( 'Inactive', $author->roles )) {
        // Loop through array in field_publications till we find the first active user
        // NOTE: We are NOT looping through th author role array. 
        $key = 1;
        while (isset($node->field_publications_author['und'][$key])) {
          $author_uid = $node->field_publications_author['und'][$key]['entity']->uid;
          $author = user_load($author_uid);
          if (! in_array ( 'Inactive', $author->roles )) {
            $name = $node->field_publications_author['und'][$key]['entity']->label;
            $title = $node->field_publications_author['und'][$key]['entity']->field_profile_title['und'][0]['value'];            
            break;  
          }    
          ++$key;
        }  
      }
      else {     
        $name = $node->field_publications_author['und'][0]['entity']->label;
        $title = $node->field_publications_author['und'][0]['entity']->field_profile_title['und'][0]['value'];         
      }
      
      if (isset($node->field_publications_link['und'][0]['title'])) {
        $form['publication_name'] = array(
          '#type' => 'item',
          '#title' => 'Published in ',
          '#markup' => '<h4>' . $node->field_publications_link['und'][0]['title'] . '</h4>',
          '#prefix' => '<div class="publish_info">',
        );
        
        if (isset($node->field_publications_link['und'][0]['url'])) {
          $form['publication_link'] = array(
            '#type' => 'link',
            '#title' => t('Read online'),
            '#href' => $node->field_publications_link['und'][0]['url'],
            '#suffix' => '<i class="fa fa-external-link"></i></div>',
          );
        }
      }
       
      $form['photos'] = array(
        '#type' => 'item',
        '#markup' => $views_embed,
      );
      // This is the first form element. It's a textfield with a label, "Name"
      $form['name'] = array(
        '#type' => 'item',
        '#markup' => $name,
        '#prefix' => '<div class="default-author-data" style="clear: left">',
      );
      
      $form['title'] = array(
        '#type' => 'item',
        '#markup' => $title,
        '#prefix' => '<div>',
        '#suffix' => '</div>',
      );      
      
      //$result = $form;
      //return $result; 
      $result = $form; 
      return $result;

    case 'example_empty':
      // It is possible that a block not have any content, since it is
      // probably dynamically constructed. In this case, Drupal will not display
      // the block at all. This block will not be displayed.
      return;
  }
}




/**
 * A module-defined block content function.
 */

// TODO: Cleanup up the unneeded crap in here.
// Ref: https://api.drupal.org/api/views/views.module/function/views_embed_view/7
// Notes:
//  This will only work so far with the polio entity - because it is looking for "field_group_tags".
//  2014/08/31: "Defined "field_related_group_tags" in research entity... reused same field in polio entity. Works perfectly
//
function idmteam_related_subteams($which_block) {

  $node = menu_get_object();
  if (isset($node->field_research_team_lead['und'][0]['target_id'])) {
    $team_lead = $node->field_research_team_lead['und'][0]['target_id'];
  }
  else {
    $team_lead = NULL;
  }
  
    

  $form = array();
  // build the parameter list to pass to views.
  $key = 0;
  if (isset($node->field_related_group_tags['und'][$key])) {
    // Set the first parmeter
    $taxonomy_list = $node->field_related_group_tags['und'][$key]['tid'];
    // Loop through the rest
    ++$key;
    while (isset($node->field_related_group_tags['und'][$key])) {
      $taxonomy_list .= '+' . $node->field_related_group_tags['und'][$key]['tid'];
      ++$key;
    }
    // Build the content for "Related Subteam members"
    $views_embed = views_embed_view('related_team_profile2', $display_id = 'related_team_members', $taxonomy_list, $team_lead);
    
    $form['photos'] = array(
      '#type' => 'item',
      '#markup' => $views_embed,
    );
    

    // Embed sort link if currant user has "update" rights to content.
    global $user;
    $op = "update";

    if (node_access($op, $node, $account = NULL)) {
      // currant user is admin - show sort link.
      $form['link'] = array(
        '#type' => 'link',
        '#title' => 'Re-order team members',
        '#href' => 'team-sort/' . $taxonomy_list,
      );
    }
      
    
  }
  
  // Build error message... (what should we really do - probably display something generic - or pass nothing
  // and let views build "default" panel". 
  else {
    $form['title'] = array(
      '#type' => 'item',
      '#markup' => t('Related team members <br/> No tags found'),
      '#prefix' => '<div>',
      '#suffix' => '</div>',
    );      
  $result = $form;
  }
    
  $result = $form; 
  return $result;
}

/**
 * 1. Grab the profile id of the team leader (should be just one)
 * 2. call View to render profile
 */
function idmteam_team_contact($which_block) {

  $node = menu_get_object();
  $form = array();
  // build the parameter list to pass to views.
  $key = 0;
  if (isset($node->field_research_team_lead['und'][$key])) {
    
    $team_lead_uid = $node->field_research_team_lead['und'][$key]['target_id'];
    // Set the first parmeter
    $taxonomy_list = $node->field_related_group_tags['und'][$key]['tid'];
    // Loop through the rest
    ++$key;
    while (isset($node->field_related_group_tags['und'][$key])) {
      $taxonomy_list .= '+' . $node->field_related_group_tags['und'][$key]['tid'];
      ++$key;
    }
    
    // Build the content
    $views_embed = views_embed_view('display_team_lead', $display_id = 'team_lead', $team_lead_uid);
    
    $form['photos'] = array(
      '#type' => 'item',
      '#markup' => t('Team contact'),
      '#markup' => $views_embed,
    );
  }
  
  // Build error message... (what should we really do - probably display something generic - or pass nothing
  // and let views build "default" panel". 
  else {
    $form['title'] = array(
      '#type' => 'item',
      '#markup' => t('Related team members <br/> No tags found'),
      '#prefix' => '<div>',
      '#suffix' => '</div>',
    );      
  }
  
  $result = $form;
  return $result;
}

/**
 *  We know the UID of Team member viewed
 *  Fetch profile id....
 */
function idmteam_team_mem_related($which_block) {
  
  $item = menu_get_item();
  
  $form = array();
  //  If we are looking at /team/bio, grab the profile ID
  
  if (isset($item['original_map'][2])) {
    $uid = $item['original_map'][2];
    
    // Load the users profile (which is where the taxonomy terms are stored.    
    $profile2 = profile2_load_by_user($uid, $type_name = NULL);
    
    // TODO: 
    // What if there is nothing set...
    $profile_array = $profile2['main']->field_profile_group_tags['und'];
    

    // Get the taxonomy object
    //  build the parameter list to pass to views.
    //  There are three Major groups:
    //    Management
    //    Research
    //    Software
    //  We will build a block for each of these found (in Alpha order) and display.     
    
    $views_embed_management = NULL;
    $views_embed_research = NULL;
    $views_embed_software = NULL;

    $key = 0;    
    if (isset($profile_array[$key])) {

      $taxonomy = taxonomy_term_load($profile_array[$key]['tid']);
      $taxonomy_term = $taxonomy->name;
      //  Embed Research "related" block
      if ($taxonomy_term == "Research") { 
        $views_embed_research = views_embed_view('group_related_sidebar', $display_id = 'research_highlight');
      }
      elseif ($taxonomy_term == "Software") { 
        $views_embed_software = views_embed_view('group_related_sidebar', $display_id = 'software_highlight');
      }
      elseif ($taxonomy_term == "Management") { 
        $views_embed_management = views_embed_view('group_related_sidebar', $display_id = 'management_highlight');
      }
      
      
      ++$key;
      while (isset($profile_array[$key]))  {
        $taxonomy = taxonomy_term_load($profile_array[$key]['tid']);
        $taxonomy_term = $taxonomy->name;
      
        if ($taxonomy_term == "Research") { 
          $views_embed_research = views_embed_view('group_related_sidebar', $display_id = 'research_highlight');
        }
        elseif ($taxonomy_term == "Software") { 
          $views_embed_software = views_embed_view('group_related_sidebar', $display_id = 'software_highlight');
        }
        elseif ($taxonomy_term == "Management") { 
          $views_embed_management = views_embed_view('group_related_sidebar', $display_id = 'management_highlight');
        }
        
        ++$key;
      }
      
      
    }
    
    //  We should have content for all three areas
    if ($views_embed_research) {
      $form['group']['research'] = array(
        '#type' => 'item',
        '#markup' => $views_embed_research,
      );
    }
    if ($views_embed_software) {
      $form['group']['software'] = array(
        '#type' => 'item',
        '#markup' => $views_embed_software,
      );
    }
    
   if ($views_embed_management) {
      $form['group']['software'] = array(
        '#type' => 'item',
        '#markup' => $views_embed_management,
      );
    }    
    
    
    }
    else {
      $form['title'] = array(
        '#type' => 'item',
        '#markup' => t('Related team members <br/> No tags found'),
        '#prefix' => '<div>',
        '#suffix' => '</div>',
      );
    }
    
    // Now we will print out the publications.
    
    // DEBUG: force UID
    //$uid = 20;
    
    $views_embed_publications = views_embed_view('publications_by_team_member', $display_id = 'publications', $uid);
    $form['publications'] = array(
      '#type' => 'item',
      '#markup' => $views_embed_publications,
      '#prefix' => '<div>',
      '#suffix' => '</div>',
    );    
    
  $result = $form;
  return $result;  
}





/**
 * Implements hook_block_view_alter().
 *
 * This hook allows you to modify the output of any block in the system.
 *
 * In addition, instead of hook_block_view_alter(), which is called for all
 * blocks, you can also use hook_block_view_MODULE_DELTA_alter() to alter a
 * specific block. To change only our block using
 * hook_block_view_MODULE_DELTA_alter, we would use the function:
 * block_example_block_view_block_example_idmteam_author_alter()
 *
 * We are going to uppercase the subject (the title of the block as shown to the
 * user) of any block if the string "uppercase" appears in the block title or
 * subject. Default block titles are set programmatically in the subject key;
 * titles created through the UI are saved in the title key. This module creates
 * an example block to demonstrate this effect (default title set
 * programmatically as subject).  You can also demonstrate the effect of this
 * hook by creating a new block whose title has the string 'uppercase' in it
 * (set as title through the UI).
 */
function idmteam_block_view_alter(&$data, $block) {
  // Insert name and title from first block on multi-member journal team block.
  
  // We'll search for the string 'uppercase'.
  if ((!empty($block->title) && stristr($block->title, 'uppercase')) || (!empty($data['subject']) && stristr($data['subject'], 'uppercase'))) {
    // This will uppercase the default title.
    $data['subject'] = isset($data['subject']) ? drupal_strtoupper($data['subject']) : '';
    // This will uppercase a title set in the UI.
    $block->title = isset($block->title) ? drupal_strtoupper($block->title) : '';
  }
}

/**
 * Implement hook_views_pre_build(&$view)
 * Purpose is to insert Team submenu on /team page.
 */

function idmteam_views_pre_view(&$view, &$display_id, &$args){
  $debug_data = $view;
  //  Determine if we are going to process this view.
  //  We don't care about $display_id
  $team_page = FALSE;
  switch ($view->name) {
    case 'team':
      $team_page = TRUE;
      break;
    case 'something_else':   //Remove before flight
      $team_page = TRUE;
      break;
  }
 
  if ($team_page) {
    //Add CSS specific to this page
    drupal_add_css(drupal_get_path('module', 'idmteam') . '/css/team.css');
    drupal_add_js(drupal_get_path('module', 'idmteam') . '/js/team.js');
    
    // Wrap the "team" items so we can handle appropriately with jQuery later. 
    $build['team'] = array(
      '#type' => 'fieldset',
      '#prefix' => '<div class="team-menu-wrap">',
      '#suffix' => '</div>',
    );
    $build['team']['team1'] = array(
      '#type' => 'item',
      '#markup' => '<ul class="level-3 inline" id="team">
                    <li class="team-1">
                      <a href="/team">All</a>
                    </li>
                    <li class="team-1">
                      <a href="/team/research">Research</a>
                    </li>
                    <li class="team-1">
                      <a href="/team/software">Software</a>
                    </li>
                    <li class="team-1">
                      <a href="/team/management">Management</a>
                    </li>	
                  </ul>',

      '#prefix' => '<div class="team-menu" style="clear: left">',
      '#suffix' => '</div>',
    );
    
    $build['team']['team2'] = array(
      '#type' => 'item',
      '#markup' => '<ul class="level-3  level-3b inline hidden" id="team-research">
                    <li id="hiv">
                      <a href="/team/research/hiv">HIV</a>
                    </li>
                    <li id="malaria">
                      <a href="/team/research/malaria">Malaria</a>
                    </li>
                    <li id="numerical">
                      <a href="/team/research/math">Applied Math</a>
                    </li>
                    <li id="polio">
                      <a href="/team/research/polio">Polio</a>
                    </li>
                    <li id="tuberculosis">
                      <a href="/team/research/tuberculosis">Tuberculosis</a>
                    </li>	                    
                  </ul>',

      '#prefix' => '<div class="team-menu" style="clear: left">',
      '#suffix' => '</div>',
    );
    
    $view->attachment_before = drupal_render($build);
     
  }
  
}


